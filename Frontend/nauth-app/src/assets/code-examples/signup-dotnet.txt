// RegisterController.cs
using Microsoft.AspNetCore.Mvc;
using NAuth.Services;
using NAuth.Models;

[ApiController]
[Route("api/[controller]")]
public class RegisterController : ControllerBase
{
    private readonly IAuthService _authService;
    private readonly IPasswordValidator _passwordValidator;
    private readonly ILogger<RegisterController> _logger;

    public RegisterController(
        IAuthService authService, 
        IPasswordValidator passwordValidator,
        ILogger<RegisterController> logger)
    {
        _authService = authService;
        _passwordValidator = passwordValidator;
        _logger = logger;
    }

    [HttpPost("register")]
    public async Task<IActionResult> Register([FromBody] RegisterRequest request)
    {
        try
        {
            var validationResult = await ValidateRegistrationAsync(request);
            if (!validationResult.IsValid)
            {
                return BadRequest(validationResult.Errors);
            }

            var user = new User
            {
                Email = request.Email,
                CreatedAt = DateTime.UtcNow,
                IsEmailVerified = false
            };

            var result = await _authService.CreateUserAsync(user, request.Password);
            
            if (result.Success)
            {
                // Send email verification
                await _authService.SendEmailVerificationAsync(user);
                
                // Generate token if remember me is checked
                if (request.RememberMe)
                {
                    var token = await _authService.GenerateTokenAsync(result.User);
                    return Ok(new RegisterResponse
                    {
                        Message = "Account created successfully",
                        Token = token,
                        User = result.User
                    });
                }

                return Ok(new { message = "Account created successfully. Please verify your email." });
            }

            return BadRequest(new { message = result.ErrorMessage });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Registration failed for email: {Email}", request.Email);
            return StatusCode(500, new { message = "An error occurred during registration" });
        }
    }

    private async Task<ValidationResult> ValidateRegistrationAsync(RegisterRequest request)
    {
        var errors = new List<string>();

        if (string.IsNullOrEmpty(request.Email))
            errors.Add("Email is required");
        else if (!IsValidEmail(request.Email))
            errors.Add("Invalid email format");
        else if (await _authService.EmailExistsAsync(request.Email))
            errors.Add("Email already exists");

        if (string.IsNullOrEmpty(request.Password))
            errors.Add("Password is required");
        else
        {
            var passwordValidation = _passwordValidator.Validate(request.Password);
            if (!passwordValidation.IsValid)
                errors.AddRange(passwordValidation.Errors);
        }

        if (request.Password != request.ConfirmPassword)
            errors.Add("Passwords do not match");

        return new ValidationResult { IsValid = !errors.Any(), Errors = errors };
    }
}

public class RegisterRequest
{
    public string Email { get; set; }
    public string Password { get; set; }
    public string ConfirmPassword { get; set; }
    public bool RememberMe { get; set; }
}