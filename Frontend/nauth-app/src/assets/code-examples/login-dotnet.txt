// LoginController.cs
using Microsoft.AspNetCore.Mvc;
using NAuth.Services;
using NAuth.Models;

[ApiController]
[Route("api/[controller]")]
public class LoginController : ControllerBase
{
    private readonly IAuthService _authService;
    private readonly ILogger<LoginController> _logger;

    public LoginController(IAuthService authService, ILogger<LoginController> logger)
    {
        _authService = authService;
        _logger = logger;
    }

    [HttpPost("login")]
    public async Task<IActionResult> Login([FromBody] LoginRequest request)
    {
        try
        {
            var validationResult = ValidateLoginRequest(request);
            if (!validationResult.IsValid)
            {
                return BadRequest(validationResult.Errors);
            }

            var result = await _authService.AuthenticateAsync(
                request.Email, 
                request.Password,
                request.RememberMe
            );

            if (result.Success)
            {
                var token = await _authService.GenerateTokenAsync(result.User);
                
                return Ok(new LoginResponse
                {
                    Token = token,
                    User = result.User,
                    ExpiresAt = DateTime.UtcNow.AddHours(request.RememberMe ? 720 : 24)
                });
            }

            return Unauthorized(new { message = "Invalid credentials" });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Login failed for email: {Email}", request.Email);
            return StatusCode(500, new { message = "An error occurred during login" });
        }
    }

    private ValidationResult ValidateLoginRequest(LoginRequest request)
    {
        var errors = new List<string>();

        if (string.IsNullOrEmpty(request.Email))
            errors.Add("Email is required");
        else if (!IsValidEmail(request.Email))
            errors.Add("Invalid email format");

        if (string.IsNullOrEmpty(request.Password))
            errors.Add("Password is required");

        return new ValidationResult { IsValid = !errors.Any(), Errors = errors };
    }
}

public class LoginRequest
{
    public string Email { get; set; }
    public string Password { get; set; }
    public bool RememberMe { get; set; }
}